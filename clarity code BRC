(impl-trait 'ST13W323H99GMQD320C2VC6WTQG9TTK3JRV1N5AQR.contract-83714501649.sip-010-trait)

;; Defines a constant "contract-owner" and assigns it 
;; the value of the transaction sender.
(define-constant contract-owner tx-sender)

;; Defines an error constant "err-owner-only" with a 
;; value of "u100" (user-defined error code).
(define-constant err-owner-only (err u100))

;; Defines an error constant "err-not-token-owner" with 
;; a value of "u101" (user-defined error code).
(define-constant err-not-token-owner (err u101))

;; Defines a fungible token named "clarity-coin".
(define-fungible-token clarity-coin)

;; Defines a public function "transfer" for transferring tokens 
;; between senders and recipients.
(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
    (begin
        ;; Checks if the transaction sender is the token owner; 
				;; otherwise, throws an error.
        (asserts! (is-eq tx-sender sender) err-not-token-owner)
        ;; Tries to transfer the specified amount of tokens from 
				;; the sender to the recipient.
        (try! (ft-transfer? clarity-coin amount sender recipient))
        ;; Matches the "memo" argument and prints it if it's a printable string.
        (match memo to-print (print to-print) 0x)
        ;; Returns "true" to indicate a successful transfer.
        (ok true)))

;; Defines a read-only function "get-name" to retrieve the name of the token.
(define-read-only (get-name)
    ;; Returns the name "Clarity Coin".
    (ok "Clarity Coin"))

;; Defines a read-only function "get-symbol" to retrieve the symbol of the token.
(define-read-only (get-symbol)
    ;; Returns the symbol "CC".
    (ok "CC"))

;; Defines a read-only function "get-decimals" to retrieve 
;; the decimal places for token balances.
(define-read-only (get-decimals)
    ;; Returns the number of decimal places as "u6".
    (ok u6))

;; Defines a read-only function "get-balance" to retrieve 
;; the token balance of a given principal.
(define-read-only (get-balance (who principal))
    ;; Returns the token balance for the specified principal.
    (ok (ft-get-balance clarity-coin who)))

;; Defines a read-only function "get-total-supply" to 
;; retrieve the total token supply.
(define-read-only (get-total-supply)
    ;; Returns the total token supply.
    (ok (ft-get-supply clarity-coin)))

;; Defines a read-only function "get-token-uri" to 
;; retrieve the URI associated with the token.
(define-read-only (get-token-uri)
    ;; Returns "none" as there is no token URI defined.
    (ok none))

;; Defines a public function "mint" to create new tokens 
;; and assign them to a recipient.
(define-public (mint (amount uint) (recipient principal))
    (begin
        ;; Checks if the transaction sender is the contract owner; 
				;; otherwise, throws an error.
        (asserts! (is-eq tx-sender contract-owner) err-owner-only)
        ;; Mints the specified amount of tokens and assigns 
				;; them to the recipient.
        (ft-mint? clarity-coin amount recipient)))
